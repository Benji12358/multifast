#!/bin/bash
# @ job_name = job_simple
# @ job_type = BLUEGENE
# Fichier sortie standard du travail
# @ output = $(job_name).$(jobid)
# Fichier erreur standard du travail
# @ error = $(output)
# Temps elapsed maximum demande
# @ wall_clock_limit = 3:00:00
# Taille partition d'execution
# @ bg_size = 64
# @ queue

# Copy executable and input file to TMPDIR
# Warning: if you need to transfer important volumes
# of data, please use a multi-step job

#************************************************************
# COEUR DU SCRIPT
#************************************************************

load_simulation_dir(){
	SIMULATION_DIR=$SIMULATION_DIR/$DNS_NAME

	if [ ! -d $TMPDIR ]; then mkdir $TMPDIR; fi

	if [ "$BUILDMODE" = "SINGLETON" ]; then
		TMPDIR=$TMPDIR/$DNS_NAME\_$$
	else
		TMPDIR=$TMPDIR/$DNS_NAME
	fi
	
	mkdir $TMPDIR

	dir_to_create_list=$TMPDIR/mkdir_dir_list
}

launch_simulation(){
	cd $TMPDIR

	h=`date +%H`
	m=`date +%M`

	echo $TEXT_LEVEL1 Running simulation at $h : $m ...

	time mpiexec -np $DNS_PROCS ./$EXEC $DNS_NAME $DNS_TIME $PROW $PCOL $TESTMODE > $DNS_OUTPUT  2>temp_arrays.log
#mpiexec -np $DNS_PROCS ./$EXEC $DNS_NAME $DNS_TIME $PROW $PCOL > $DNS_OUTPUT 2>temp_arrays.log
	
	
#mpiexec -np $DNS_PROCS /home/bureau/Simulation/valgrind/bin/valgrind ./$EXEC $DNS_NAME $DNS_TIME $PROW $PCOL > $DNS_OUTPUT 2>temp_arrays.log 
	#MPIWRAP_DEBUG=warn LD_PRELOAD=$VALGRIND_PATH/lib/valgrind/libmpiwrap-amd64-linux.so mpiexec -np $DNS_PROCS $VALGRIND_PATH/bin/valgrind ./$EXEC $DNS_NAME $DNS_TIME $PROW $PCOL > $DNS_OUTPUT 2>temp_arrays.log
	cd -
}

list_dir_to_create(){

	cd $TMPDIR
	
	#./PREPROCESS $DNS_NAME $dir_to_create_list >lol
	seq $IT1 $STEP $IT2 >	$dir_to_create_list
	echo $TEXT_LEVEL2 The following results directory will be created:
	more $dir_to_create_list

	cd -
}

create_results_dir()
{
	cd $TMPDIR/$DNS_NAME/Results/3D	

	for numero in `more $dir_to_create_list`
    		do mkdir ./field"$numero"
	done

	cd -



	cd $TMPDIR/$DNS_NAME/Results/Velocity/3D	

	for numero in `more $dir_to_create_list`
    		do mkdir ./field"$numero"
	done

	cd -
}

build_running_env(){

	echo $TEXT_LEVEL1 Building running environnment...

	# Create a new simulation directory ONLY if no simulation of same name exists
	if [ ! -d $TMPDIR/$DNS_NAME ]; then
	
		cp -r $SIMULATION_DIR/.recovery/arborescence $TMPDIR/$DNS_NAME

		cp -r $SIMULATION_DIR/Log $TMPDIR/$DNS_NAME
		cp -r $SIMULATION_DIR/.recovery $TMPDIR/$DNS_NAME

	fi

	cp -r $SIMULATION_DIR/Input $TMPDIR/$DNS_NAME


	if [[ $ITNUMBER ]]; then

		EXPR="1s/[0-9][0-9]*/$ITNUMBER/1"
		sed $EXPR $TMPDIR/$DNS_NAME/Input/Settings/global.d > tmpfile
		mv tmpfile $TMPDIR/$DNS_NAME/Input/Settings/global.d
	fi

	cp ./$EXEC $TMPDIR
	#cp $DNS_CODE/PREPROCESS $TMPDIR

}

clean_results()
{

	for numero in `more $dir_to_create_list`
    		do field=$TMPDIR/$DNS_NAME/Results/3D/field$numero
		nb_file=`ls -l $field|wc -l`
		echo $TMPDIR/$DNS_NAME/Results/3D/field$numero contient $nb_file fichiers

		if [ $nb_file -ne 7 ]
		then
		   echo $field "est vide";
		   rm -rf $field
		fi
	done

}

save_simulation(){

	echo $TEXT_LEVEL1 Saving results...

	cp $TMPDIR/core* $TMPDIR/$DNS_NAME

	clean_results


	cp $TMPDIR/$DNS_OUTPUT $SIMULATION_DIR/
	cp -r $TMPDIR/$DNS_NAME/Results/3D/* $SIMULATION_DIR/Results/3D
	cp -r $TMPDIR/$DNS_NAME/.recovery $SIMULATION_DIR/
	cp -r $TMPDIR/$DNS_NAME/Log $SIMULATION_DIR/
	
}

TEXT_LEVEL1="---------"
TEXT_LEVEL2="-------------"

TESTMODE=$1
echo
echo "EXECNAME" $TESTMODE
echo
[ $TESTMODE -eq 0 ] && EXEC=SIM_EXEC
[ $TESTMODE -eq 1 ] && EXEC=TEST_EXEC

SIMULATION_DIR=$2
DNS_NAME=$3
TMPDIR=$4
BUILDMODE=$5
DNS_PROCS=$6
PROW=$7
PCOL=$8
ITNUMBER=$9


DNS_OUTPUT=OUT_DNS
DNS_TIME=10000000
JOB_NAME=job
PROC_BY_NODE=4
IT1=0
IT2=100
STEP=10


VALGRIND_PATH=/home/bureau/Simulation/valgrind

dir_to_create_list=$TMPDIR/mkdir_dir_list

load_simulation_dir
build_running_env
list_dir_to_create
create_results_dir
launch_simulation
#save_simulation

