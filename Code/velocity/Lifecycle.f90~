module VELOCITY_init
    implicit none

contains

    subroutine read_settings()
        implicit none
    end subroutine read_settings

    subroutine load_initial_state()

        use run_ctxt_data

        use start_settings

        use VELOCITY_workspace_view
        use VELOCITY_loader
        use VELOCITY_bc_controller
        use VELOCITY_operations
        use Turbulence_generator

        implicit none
        logical             :: fexist(4)
        logical     :: previousRHS_are_available=.false.

        character*200       :: VELOCITY_external_fields_path
        character*20        :: filename
        character*10 tmp_str

        fexist=.true.

        ! Fill the initial fields ----------------------------------------
        if ((run_ctxt==CONTINUE_FROM_PREVIOUS_RUN).or.(run_ctxt==RECOVERY_A_RUN)) then

            if(nrank==0) write(*,*)
            if(nrank==0) write(*,*) 'Continue a simulation from velocity dir located at: ', recovery_fields_dir
            call load_fields(recovery_fields_dir, .false., fexist)

        else

            select case (start_source_type)
                case (NO_SOURCE)

                    call init_turbulent_field(vper)

                    if(nrank==0) write(*,*) 'Running a new simulation from a generated turbulent field' , vper
                    if(nrank==0) write(*,*) 'The Euler scheme will be used for the first iteration'

                    call apply_BC1
                    call apply_BC2

                case (HDF5_FILE)

                    write(tmp_str, "(i10)")start_it
                    filename="field"//trim(adjustl(tmp_str))

                    VELOCITY_external_fields_path=trim(external_fields_path)//"/3D/"//trim(filename)


                    write(*,*) 'VELOCITY_external_fields_path ', VELOCITY_external_fields_path
                    write(*,*) 'start_from_coarse_file ', start_from_coarse_file

                    call load_fields(VELOCITY_external_fields_path, start_from_coarse_file, fexist)

            end select

        end if

!        call spread_to_all_pencil(q3_z, q2_y, q1_x, dp_z)


    end subroutine load_initial_state

    subroutine allocate_datas()

        use decomp_2d

        use physical_fields
        implicit none

        ! Inner values (in x,y,z decomposition configuration)-----------------
        allocate(q3_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        q3_x=0.d0
        allocate(q2_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        q2_x=0.d0
        allocate(q1_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        q1_x=0.d0
        allocate(divu_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        divu_x=0.d0
        allocate(dp_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        dp_x=0.d0

        allocate(q3_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        q3_y=0.d0
        allocate(q2_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        q2_y=0.d0
        allocate(q1_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        q1_y=0.d0
        allocate(divu_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        divu_y=0.d0
        allocate(dp_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        dp_y=0.d0

        allocate(q3_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        q3_z=0.d0
        allocate(q2_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        q2_z=0.d0
        allocate(q1_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        q1_z=0.d0

!        allocate(pr_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
!        pr_x=0.d0
!        allocate(pr_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
!        pr_y=0.d0
!        allocate(pr_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
!        pr_z=0.d0
        allocate(divu_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        divu_z=0.d0
        allocate(dp_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        dp_z=0.d0

        allocate(dphidx1_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        dphidx1_x=0.d0
        allocate(dphidx2_y(ystart(1):yend(1), ystart(2):yend(2), ystart(3):yend(3)))
        dphidx2_y=0.d0
        allocate(dphidx2_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        dphidx2_x=0.d0
        allocate(dphidx3_z(zstart(1):zend(1), zstart(2):zend(2), zstart(3):zend(3)))
        dphidx3_z=0.d0
        allocate(dphidx3_x(xstart(1):xend(1), xstart(2):xend(2), xstart(3):xend(3)))
        dphidx3_x=0.d0

        ! Wall values allocation ---------------------------------------------
        !ATTENTION
        allocate(q3_wall10(xstart(2):xend(2), xstart(3):xend(3)))
        q3_wall10=0.d0
        allocate(q2_wall10(xstart(2):xend(2), xstart(3):xend(3)))
        q2_wall10=0.d0
        allocate(q1_wall10(xstart(2):xend(2), xstart(3):xend(3)))
        q1_wall10=0.d0

        allocate(q3_wall11(xstart(2):xend(2), xstart(3):xend(3)))
        q3_wall11=0.d0
        allocate(q2_wall11(xstart(2):xend(2), xstart(3):xend(3)))
        q2_wall11=0.d0
        allocate(q1_wall11(xstart(2):xend(2), xstart(3):xend(3)))
        q1_wall11=0.d0

        allocate(q3_wall20(ystart(1):yend(1), ystart(3):yend(3)))
        q3_wall20=0.d0
        allocate(q2_wall20(ystart(1):yend(1), ystart(3):yend(3)))
        q2_wall20=0.d0
        allocate(q1_wall20(ystart(1):yend(1), ystart(3):yend(3)))
        q1_wall20=0.d0

        allocate(q3_wall21(ystart(1):yend(1), ystart(3):yend(3)))
        q3_wall21=0.d0
        allocate(q2_wall21(ystart(1):yend(1), ystart(3):yend(3)))
        q2_wall21=0.d0
        allocate(q1_wall21(ystart(1):yend(1), ystart(3):yend(3)))
        q1_wall21=0.d0

        !ATTENTION
        allocate(q3_wall30(zstart(1):zend(1), zstart(2):zend(2)))
        q3_wall30=0.d0
        allocate(q2_wall30(zstart(1):zend(1), zstart(2):zend(2)))
        q2_wall30=0.d0
        allocate(q1_wall30(zstart(1):zend(1), zstart(2):zend(2)))
        q1_wall30=0.d0

        allocate(q3_wall31(zstart(1):zend(1), zstart(2):zend(2)))
        q3_wall31=0.d0
        allocate(q2_wall31(zstart(1):zend(1), zstart(2):zend(2)))
        q2_wall31=0.d0
        allocate(q1_wall31(zstart(1):zend(1), zstart(2):zend(2)))
        q1_wall31=0.d0


    end subroutine allocate_datas

    subroutine initialize()

        use VELOCITY_bc_controller
        use VELOCITY_solver, only: SOLVER_init => init
        use VELOCITY_inout_flow, only:    &
        OPEN_init=>inoutflow_init

        implicit none

        call allocate_datas

        call set_numerical_boundaries
        call init_workspace
        call SOLVER_init
        call OPEN_init


        call load_initial_state

        contains

            subroutine init_workspace()

                use mpi
                use decomp_2D

                use file_copy

                use COMMON_workspace_view
                use VELOCITY_workspace_view

                implicit none

                integer             :: mpi_rank, mpi_err

                results_path            =trim(COMMON_results_path)
                results3D_path          =trim(results_path)//"3D/"

                divergence_history_file =trim(COMMON_log_path)//'Velocity/Divergence.csv'
                kinetic_history_file    =trim(COMMON_log_path)//'Velocity/Kinetic.csv'
                sensor_file             =trim(COMMON_log_path)//'Velocity/AA_v.csv'
                recovery_RHS_dir       =trim(COMMON_recovery_path)//"Velocity/previousRHS"
                recovery_fields_dir  =trim(COMMON_recovery_path)//"Velocity/Fields"
                recovery_sensor_file    =trim(COMMON_recovery_path)//'Velocity/AA_v.csv'
                recovery_divergence_history_file    =trim(COMMON_recovery_path)//'Velocity/Divergence.csv'
                recovery_kinetic_history_file    =trim(COMMON_recovery_path)//'Velocity/Kinetic.csv'

                if(nrank==0) then
                    write(*,*)'VELOCITY:init_workspace:divergence_history_file'
                    write(*,*) divergence_history_file
                    write(*,*)'VELOCITY:init_workspace:results_path'
                    write(*,*)results_path
                    write(*,*)'VELOCITY:init_workspace:results3D_path'
                    write(*,*)results3D_path
                    write(*,*)'VELOCITY:init_workspace:sensor_file'
                    write(*,*)sensor_file
                endif

                call MPI_COMM_RANK(MPI_COMM_WORLD, mpi_rank, mpi_err)

                if (mpi_rank==0) then

                    call copy_ascii_file(file_dest=kinetic_history_file,         file_src=recovery_kinetic_history_file)
                    call copy_ascii_file(file_dest=divergence_history_file,      file_src=recovery_divergence_history_file)
                    call copy_ascii_file(file_dest=sensor_file,                  file_src=recovery_sensor_file)

                end if

                ! Wait that the master processus finish to create the workspace
                call MPI_BARRIER(MPI_COMM_WORLD, mpi_err)

            end subroutine init_workspace

    end subroutine initialize

end module VELOCITY_init

module VELOCITY_recovery
    implicit none

contains

    subroutine save_state()

        use file_copy
        use MPI
        use decomp_2d

        use VELOCITY_workspace_view
        use VELOCITY_dao
        use VELOCITY_solver, SOVLER_save_state=>save_state

        implicit none

        call write_fields(recovery_fields_dir)
        call SOVLER_save_state

        if (nrank==0) then

            call copy_ascii_file(file_dest=recovery_divergence_history_file, file_src=divergence_history_file)
            call copy_ascii_file(file_dest=recovery_sensor_file, file_src=sensor_file)

        end if

    end subroutine save_state

end module VELOCITY_recovery


module VELOCITY_final
    implicit none

contains

    subroutine deallocate_data()

        use physical_fields

        implicit none

        ! Inner values (in x,y,z decomposition configuration)-----------------
        deallocate(q3_x)
        deallocate(q2_x)
        deallocate(q1_x)
        deallocate(divu_x)
        deallocate(dp_x)

        deallocate(q3_y)
        deallocate(q2_y)
        deallocate(q1_y)
        deallocate(divu_y)
        deallocate(dp_y)

        deallocate(q3_z)
        deallocate(q2_z)
        deallocate(q1_z)

!        deallocate(pr_x)
!        deallocate(pr_y)
!        deallocate(pr_z)
        deallocate(divu_z)
        deallocate(dp_z)

        deallocate(dphidx1_x)
        deallocate(dphidx2_y)
        deallocate(dphidx2_x)
        deallocate(dphidx3_z)
        deallocate(dphidx3_x)

        ! Wall values deallocation ---------------------------------------------
        deallocate(q3_wall10)
        deallocate(q2_wall10)
        deallocate(q1_wall10)

        deallocate(q3_wall11)
        deallocate(q2_wall11)
        deallocate(q1_wall11)

        deallocate(q3_wall20)
        deallocate(q2_wall20)
        deallocate(q1_wall20)

        deallocate(q3_wall21)
        deallocate(q2_wall21)
        deallocate(q1_wall21)

        deallocate(q3_wall30)
        deallocate(q2_wall30)
        deallocate(q1_wall30)

        deallocate(q3_wall31)
        deallocate(q2_wall31)
        deallocate(q1_wall31)

    end subroutine deallocate_data

    subroutine finalize()
        implicit none

        call deallocate_data

    end subroutine finalize

end module VELOCITY_final
